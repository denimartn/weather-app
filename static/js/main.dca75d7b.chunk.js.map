{"version":3,"sources":["Form.js","WeatherCard.js","utils.js","WeatherCards.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","className","type","placeholder","onChange","event","setInputValue","target","value","WeatherCard","key","index","date","alt","src","minTemp","maxTemp","description","floor","n","Math","dateConverter","str","newStr","dateToCheck","Date","today","toDateString","Intl","DateTimeFormat","weekday","month","day","format","WeatherCards","locationWeather","map","weather","applicable_date","weather_state_abbr","min_temp","max_temp","weather_state_name","App","React","useState","inputValue","setLocationWeather","state","setState","e","a","preventDefault","api","query","axios","get","res","data","woeid","location","newArr","consolidated_weather","push","console","log","href","onClick","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dca75d7b.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Form = (props) => {\n  return (\n    <form onSubmit={props.onSubmit}>\n      <div className=\"input-wrapper max-w-md mx-auto px-2 py-2 flex\">\n        <input\n          className=\"shadow appearance-none border rounded-lg py-2 px-3 text-grey-darker mr-1 bg-white focus:outline-none  w-full\"\n          type=\"text\"\n          placeholder=\"Enter a city\"\n          onChange={(event) => props.setInputValue(event.target.value)}\n        ></input>\n        <button\n          type=\"submit\"\n          className=\"bg-dodgerblue-400  appearance-none border rounded-lg py-2 px-3 text-white mr-1 font-bold focus:outline-none \"\n        >\n          Search\n        </button>\n      </div>\n    </form>\n  );\n};\n","import React from \"react\";\nimport \"./WeatherCard.css\"\n\n\nexport const WeatherCard = (props) => {\n  return (\n    <div key={props.index} className=\"card shadow-lg px-4 py-4 mr-4 bg-white\">\n      <h2 className=\"date text-center mb-4 text-sm\">{props.date}</h2>\n      <div className=\"flex\">\n        <img\n          className=\"icon mb-2 w-10 h-10 mx-auto mt-2 mb-4\"\n          alt=\"weather icon\"\n          src={props.src}\n        />\n      </div>\n      <div className=\"flex justify-between mb-4\">\n        <p className=\"temp mr-6 font-medium\">{props.minTemp}°</p>\n        <p className=\"temp font-medium\">{props.maxTemp}°</p>\n      </div>\n      <p className=\"description text-center\">{props.description}</p>\n    </div>\n  );\n};\n","// Utilities\n\nexport function floor(n) {\n  return Math.floor(n);\n}\n\nexport function dateConverter(str) {\n  let newStr = \"\";\n  const dateToCheck = new Date(str);\n  const today = new Date();\n  if (dateToCheck.toDateString() === today.toDateString()) {\n    newStr = \"Today\";\n  } else {\n    //format date\n    let options = {\n      weekday: \"short\",\n      month: \"short\",\n      day: \"numeric\",\n    };\n    newStr = new Intl.DateTimeFormat(\"en-US\", options).format(dateToCheck);\n  }\n  return newStr;\n}\n","import React from \"react\";\nimport { WeatherCard } from \"./WeatherCard\";\nimport { dateConverter, floor } from \"./utils\";\nimport \"./WeatherCards.css\"\nexport const WeatherCards = (props) => {\n  return (\n    <div className=\"cards px-4 py-4 flex justify-center\">\n      {props.locationWeather.map((weather, index) => (\n        <WeatherCard\n          key={index}\n          date={dateConverter(weather.applicable_date)}\n          src={`https://www.metaweather.com/static/img/weather/${weather.weather_state_abbr}.svg`}\n          minTemp={floor(weather.min_temp)}\n          maxTemp={floor(weather.max_temp)}\n          description={weather.weather_state_name}\n        />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./tailwind.output.css\";\nimport axios from \"axios\";\nimport { Form } from \"./Form\";\nimport { WeatherCards } from \"./WeatherCards\";\n\nfunction App() {\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [locationWeather, setLocationWeather] = React.useState([]);\n  const [state, setState] = React.useState(\"empty\");\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    setState(\"loading\");\n    try {\n      const api =\n        \"https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api\";\n      const query = inputValue;\n      const res = await axios.get(`${api}/location/search/?query=${query}`);\n      if (!res.data[0]) {\n        setState(\"empty\");\n        return;\n      }\n      let woeid = res.data[0].woeid;\n\n      const location = await axios.get(`${api}/location/${woeid}`);\n\n      let newArr = [];\n      for (let weather of location.data.consolidated_weather) {\n        newArr.push(weather);\n      }\n      setState(\"ready\");\n      setLocationWeather(newArr);\n      setInputValue(\"\");\n    } catch (err) {\n      console.log(err);\n      setState(\"error\");\n    }\n  };\n\n  return (\n    <div className=\"main-container w-full \">\n      <div className=\"title  font-bold text-4xl mb-2 mt-8 text-center\">\n        Weather forecast\n      </div>\n      <p className=\"subtitle text-center mb-2 text-sm\">\n        Made by{\" \"}\n        <a className=\"subtitle text-sm\" href=\"https://github.com/denimartn\">\n          Denise\n        </a>\n      </p>\n      <Form onSubmit={onSubmit} setInputValue={setInputValue} />\n\n      <div className=\"container mx-auto px-2 flex justify-center mt-5\">\n        {state === \"loading\" ? (\n          <div className=\"flex justify-center mt-5\">\n            <div className=\"loader ease-linear 0 rounded-full border-8 border-t-8  h-20 w-20\"></div>\n          </div>\n        ) : null}\n        {state === \"error\" ? (\n          <button\n            className=\"error bg-red-100 border border-red-400 text-red p-2 rounded mx-auto \"\n            onClick={() => {\n              setState(\"empty\");\n            }}\n          >\n            Hey, something seriously went wrong!\n          </button>\n        ) : null}\n\n        {state === \"ready\" ? (\n          <WeatherCards locationWeather={locationWeather} />\n        ) : null}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}